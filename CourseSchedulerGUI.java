package CourseScheduler;
import java.util.ArrayList;
import javax.swing.JTabbedPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Timestamp;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author sammyparvatini
 */
public class CourseSchedulerGUI extends javax.swing.JFrame {

    /**
     * Creates new form CourseSchedulerGUI
     */
    public CourseSchedulerGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        courseSchedulerLabel = new javax.swing.JLabel();
        currentSemesterLabel = new javax.swing.JLabel();
        currentSemesterIndicatorLabel = new javax.swing.JLabel();
        changeSemesterComboBox = new javax.swing.JComboBox<>();
        personTypePanel = new javax.swing.JTabbedPane();
        adminPanel = new javax.swing.JPanel();
        adminFunctions = new javax.swing.JTabbedPane();
        addSemesterPanel = new javax.swing.JPanel();
        nameSemesterLabel = new javax.swing.JLabel();
        nameSemesterField = new javax.swing.JTextField();
        addSemesterSubmitButton = new javax.swing.JButton();
        addSemesterStatusLabel = new javax.swing.JLabel();
        addCoursePanel = new javax.swing.JPanel();
        courseCodeLabel = new javax.swing.JLabel();
        courseCodeField = new javax.swing.JTextField();
        addCourseSubmitButton = new javax.swing.JButton();
        addStudentStatusLabel = new javax.swing.JLabel();
        courseDescriptLabel = new javax.swing.JLabel();
        courseDescriptionField = new javax.swing.JTextField();
        seatsLabel = new javax.swing.JLabel();
        seatsSpinner = new javax.swing.JSpinner();
        addCourseStatusLabel = new javax.swing.JLabel();
        addStudentPanel = new javax.swing.JPanel();
        studentIDLabel = new javax.swing.JLabel();
        studentIDField = new javax.swing.JTextField();
        firstNameLabel = new javax.swing.JLabel();
        firstNameField = new javax.swing.JTextField();
        lastNameLabel = new javax.swing.JLabel();
        lastNameField = new javax.swing.JTextField();
        addStudentSubmitButton = new javax.swing.JButton();
        addStudentStatusLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        selectCourseDCSComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        dCSSubmitButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        scheduledStudentsTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        waitlistedStudentsTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        dropStudentComboBox = new javax.swing.JComboBox<>();
        dropStudentButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        dropStudentStatus = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        dropCourseComboBox = new javax.swing.JComboBox<>();
        dropCourseAdminButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        dropCourseStatus = new javax.swing.JTextArea();
        studentPanel = new javax.swing.JPanel();
        studentFunctions = new javax.swing.JTabbedPane();
        displayCoursePanel = new javax.swing.JPanel();
        displayCoursesTable = new javax.swing.JScrollPane();
        displayCourses = new javax.swing.JTable();
        displayCourseDisplayButton = new javax.swing.JButton();
        scheduleCoursePanel = new javax.swing.JPanel();
        selectCourseLabel = new javax.swing.JLabel();
        scheduleCourseComboBox = new javax.swing.JComboBox<>();
        selectStudentLabelSC = new javax.swing.JLabel();
        scheduleCourseStudentComboBox = new javax.swing.JComboBox<>();
        scheduleCourseStatusLabel = new javax.swing.JLabel();
        scheduleCourseSubmitButton = new javax.swing.JButton();
        statusofSeatsLabel = new javax.swing.JLabel();
        displaySchedulePanel = new javax.swing.JPanel();
        selectStudentLabelDS = new javax.swing.JLabel();
        displayScheduleStudentComboBox = new javax.swing.JComboBox<>();
        displayScheduleTable = new javax.swing.JScrollPane();
        displaySchedule = new javax.swing.JTable();
        displayScheduleDisplayButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        selectCourseDropComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        selectStudentDropComboBox = new javax.swing.JComboBox<>();
        dropCourseStatusLabel = new javax.swing.JLabel();
        dropCourseStudentButton = new javax.swing.JButton();
        waitlistStatusLabel = new javax.swing.JLabel();
        changeSemesterButton = new javax.swing.JButton();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 204));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        courseSchedulerLabel.setFont(new java.awt.Font("Malayalam MN", 1, 48)); // NOI18N
        courseSchedulerLabel.setForeground(new java.awt.Color(0, 102, 255));
        courseSchedulerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        courseSchedulerLabel.setText("Course Scheduler");
        courseSchedulerLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        currentSemesterLabel.setFont(new java.awt.Font("Malayalam MN", 1, 18)); // NOI18N
        currentSemesterLabel.setText("Current Semester:");

        nameSemesterLabel.setText("Semester Name:");

        nameSemesterField.setColumns(20);

        addSemesterSubmitButton.setText("Submit");
        addSemesterSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSemesterSubmitButtonActionPerformed(evt);
            }
        });

        addSemesterStatusLabel.setText("          ");

        javax.swing.GroupLayout addSemesterPanelLayout = new javax.swing.GroupLayout(addSemesterPanel);
        addSemesterPanel.setLayout(addSemesterPanelLayout);
        addSemesterPanelLayout.setHorizontalGroup(
            addSemesterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addSemesterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addSemesterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addSemesterPanelLayout.createSequentialGroup()
                        .addComponent(nameSemesterLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nameSemesterField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addSemesterSubmitButton))
                    .addComponent(addSemesterStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        addSemesterPanelLayout.setVerticalGroup(
            addSemesterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addSemesterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addSemesterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameSemesterLabel)
                    .addComponent(nameSemesterField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addSemesterSubmitButton))
                .addGap(35, 35, 35)
                .addComponent(addSemesterStatusLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        adminFunctions.addTab("Add Semester", addSemesterPanel);

        courseCodeLabel.setText("Course Code:");

        courseCodeField.setColumns(20);

        addCourseSubmitButton.setText("Submit");
        addCourseSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCourseSubmitButtonActionPerformed(evt);
            }
        });

        addStudentStatusLabel.setText("        ");

        courseDescriptLabel.setText("Course Description:");

        courseDescriptionField.setColumns(20);

        seatsLabel.setText("Seats:");

        addCourseStatusLabel.setText("  ");

        javax.swing.GroupLayout addCoursePanelLayout = new javax.swing.GroupLayout(addCoursePanel);
        addCoursePanel.setLayout(addCoursePanelLayout);
        addCoursePanelLayout.setHorizontalGroup(
            addCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addCoursePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addCoursePanelLayout.createSequentialGroup()
                        .addComponent(courseCodeLabel)
                        .addGap(18, 18, 18)
                        .addComponent(courseCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addCoursePanelLayout.createSequentialGroup()
                        .addComponent(seatsLabel)
                        .addGap(18, 18, 18)
                        .addComponent(seatsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(addCourseSubmitButton)
                        .addGap(62, 62, 62)
                        .addComponent(addStudentStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addCoursePanelLayout.createSequentialGroup()
                        .addComponent(courseDescriptLabel)
                        .addGap(18, 18, 18)
                        .addComponent(courseDescriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addCourseStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        addCoursePanelLayout.setVerticalGroup(
            addCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addCoursePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(courseCodeLabel)
                    .addComponent(courseCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(courseDescriptLabel)
                    .addComponent(courseDescriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(addCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addCoursePanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(addStudentStatusLabel))
                    .addGroup(addCoursePanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(seatsLabel)
                            .addComponent(addCourseSubmitButton)
                            .addComponent(seatsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addCourseStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(281, Short.MAX_VALUE))
        );

        adminFunctions.addTab("Add Course", addCoursePanel);

        studentIDLabel.setText("Student ID:");

        studentIDField.setColumns(20);

        firstNameLabel.setText("First Name:");

        firstNameField.setColumns(20);

        lastNameLabel.setText("Last Name:");

        lastNameField.setColumns(20);

        addStudentSubmitButton.setText("Submit");
        addStudentSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStudentSubmitButtonActionPerformed(evt);
            }
        });

        addStudentStatusLabel1.setText("   ");

        javax.swing.GroupLayout addStudentPanelLayout = new javax.swing.GroupLayout(addStudentPanel);
        addStudentPanel.setLayout(addStudentPanelLayout);
        addStudentPanelLayout.setHorizontalGroup(
            addStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addStudentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addStudentPanelLayout.createSequentialGroup()
                        .addComponent(studentIDLabel)
                        .addGap(18, 18, 18)
                        .addComponent(studentIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addStudentPanelLayout.createSequentialGroup()
                        .addComponent(firstNameLabel)
                        .addGap(18, 18, 18)
                        .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addStudentPanelLayout.createSequentialGroup()
                        .addComponent(lastNameLabel)
                        .addGap(18, 18, 18)
                        .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(addStudentSubmitButton))
                    .addComponent(addStudentStatusLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(377, Short.MAX_VALUE))
        );
        addStudentPanelLayout.setVerticalGroup(
            addStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addStudentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentIDLabel)
                    .addComponent(studentIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameLabel)
                    .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addStudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastNameLabel)
                    .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addStudentSubmitButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addStudentStatusLabel1)
                .addContainerGap(281, Short.MAX_VALUE))
        );

        adminFunctions.addTab("Add Student", addStudentPanel);

        jLabel3.setText("Select Course: ");

        jLabel4.setText("Scheduled Students:");

        dCSSubmitButton.setText("Submit");
        dCSSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dCSSubmitButtonActionPerformed(evt);
            }
        });

        scheduledStudentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "First Name", "Last Name", "Student ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(scheduledStudentsTable);

        jLabel5.setText("Waitlisted Students:");

        waitlistedStudentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "First Name", "Last Name", "Student ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(waitlistedStudentsTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectCourseDCSComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dCSSubmitButton))
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(307, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(selectCourseDCSComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dCSSubmitButton))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        adminFunctions.addTab("Display Course List of Students", jPanel2);

        jLabel6.setText("Select Student:");

        dropStudentButton.setText("Submit");
        dropStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropStudentButtonActionPerformed(evt);
            }
        });

        dropStudentStatus.setColumns(20);
        dropStudentStatus.setRows(5);
        jScrollPane4.setViewportView(dropStudentStatus);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dropStudentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dropStudentButton)))
                .addContainerGap(282, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(dropStudentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dropStudentButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(97, Short.MAX_VALUE))
        );

        adminFunctions.addTab("Drop Student", jPanel3);

        jLabel7.setText("Select Course:");

        dropCourseAdminButton.setText("Submit");
        dropCourseAdminButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropCourseAdminButtonActionPerformed(evt);
            }
        });

        dropCourseStatus.setColumns(20);
        dropCourseStatus.setRows(5);
        jScrollPane5.setViewportView(dropCourseStatus);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dropCourseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(dropCourseAdminButton)))
                .addContainerGap(239, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(dropCourseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dropCourseAdminButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(106, Short.MAX_VALUE))
        );

        adminFunctions.addTab("Drop Course", jPanel4);

        javax.swing.GroupLayout adminPanelLayout = new javax.swing.GroupLayout(adminPanel);
        adminPanel.setLayout(adminPanelLayout);
        adminPanelLayout.setHorizontalGroup(
            adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(adminFunctions))
        );
        adminPanelLayout.setVerticalGroup(
            adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, adminPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(adminFunctions, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        personTypePanel.addTab("Admin", adminPanel);

        displayCourses.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        displayCourses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Course Code", "Description", "Seats"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        displayCourses.setGridColor(new java.awt.Color(0, 0, 0));
        displayCoursesTable.setViewportView(displayCourses);

        displayCourseDisplayButton.setText("Display");
        displayCourseDisplayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayCourseDisplayButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout displayCoursePanelLayout = new javax.swing.GroupLayout(displayCoursePanel);
        displayCoursePanel.setLayout(displayCoursePanelLayout);
        displayCoursePanelLayout.setHorizontalGroup(
            displayCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayCoursePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(displayCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(displayCoursesTable, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 815, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, displayCoursePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(displayCourseDisplayButton)))
                .addContainerGap())
        );
        displayCoursePanelLayout.setVerticalGroup(
            displayCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayCoursePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(displayCoursesTable, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayCourseDisplayButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        studentFunctions.addTab("Display Courses", displayCoursePanel);

        selectCourseLabel.setText("Select Course:");

        selectStudentLabelSC.setText("Select Student:");

        scheduleCourseStatusLabel.setText("    ");

        scheduleCourseSubmitButton.setText("Submit");
        scheduleCourseSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleCourseSubmitButtonActionPerformed(evt);
            }
        });

        statusofSeatsLabel.setText("   ");

        javax.swing.GroupLayout scheduleCoursePanelLayout = new javax.swing.GroupLayout(scheduleCoursePanel);
        scheduleCoursePanel.setLayout(scheduleCoursePanelLayout);
        scheduleCoursePanelLayout.setHorizontalGroup(
            scheduleCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scheduleCoursePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(scheduleCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(scheduleCoursePanelLayout.createSequentialGroup()
                        .addComponent(statusofSeatsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scheduleCourseStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(scheduleCoursePanelLayout.createSequentialGroup()
                        .addGroup(scheduleCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectCourseLabel)
                            .addComponent(selectStudentLabelSC))
                        .addGap(18, 18, 18)
                        .addGroup(scheduleCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(scheduleCoursePanelLayout.createSequentialGroup()
                                .addComponent(scheduleCourseStudentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(scheduleCourseSubmitButton))
                            .addComponent(scheduleCourseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        scheduleCoursePanelLayout.setVerticalGroup(
            scheduleCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scheduleCoursePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(scheduleCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectCourseLabel)
                    .addComponent(scheduleCourseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(scheduleCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectStudentLabelSC)
                    .addComponent(scheduleCourseStudentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scheduleCourseSubmitButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(scheduleCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scheduleCourseStatusLabel)
                    .addComponent(statusofSeatsLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        studentFunctions.addTab("Schedule Course", scheduleCoursePanel);

        selectStudentLabelDS.setText("Select Student:");

        displaySchedule.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        displaySchedule.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Course Code", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        displaySchedule.setGridColor(new java.awt.Color(0, 0, 0));
        displaySchedule.setShowGrid(false);
        displayScheduleTable.setViewportView(displaySchedule);

        displayScheduleDisplayButton.setText("Display");
        displayScheduleDisplayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayScheduleDisplayButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout displaySchedulePanelLayout = new javax.swing.GroupLayout(displaySchedulePanel);
        displaySchedulePanel.setLayout(displaySchedulePanelLayout);
        displaySchedulePanelLayout.setHorizontalGroup(
            displaySchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displaySchedulePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectStudentLabelDS)
                .addGap(18, 18, 18)
                .addComponent(displayScheduleStudentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(displaySchedulePanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(displaySchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(displayScheduleDisplayButton)
                    .addComponent(displayScheduleTable, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        displaySchedulePanelLayout.setVerticalGroup(
            displaySchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displaySchedulePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(displaySchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectStudentLabelDS)
                    .addComponent(displayScheduleStudentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayScheduleTable, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayScheduleDisplayButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        studentFunctions.addTab("Display Schedule", displaySchedulePanel);

        jLabel1.setText("Select Course: ");

        jLabel2.setText("Select Student: ");

        selectStudentDropComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectStudentDropComboBoxActionPerformed(evt);
            }
        });

        dropCourseStatusLabel.setText(" ");

        dropCourseStudentButton.setText("Submit");
        dropCourseStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropCourseStudentButtonActionPerformed(evt);
            }
        });

        waitlistStatusLabel.setText(" ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectStudentDropComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectCourseDropComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dropCourseStudentButton))
                    .addComponent(dropCourseStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(waitlistStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE))
                .addContainerGap(416, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(selectStudentDropComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(selectCourseDropComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dropCourseStudentButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dropCourseStatusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(waitlistStatusLabel)
                .addContainerGap(277, Short.MAX_VALUE))
        );

        studentFunctions.addTab("Drop Course", jPanel1);

        javax.swing.GroupLayout studentPanelLayout = new javax.swing.GroupLayout(studentPanel);
        studentPanel.setLayout(studentPanelLayout);
        studentPanelLayout.setHorizontalGroup(
            studentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(studentFunctions))
        );
        studentPanelLayout.setVerticalGroup(
            studentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(studentFunctions)
        );

        personTypePanel.addTab("Student", studentPanel);

        changeSemesterButton.setText("Change Semester");
        changeSemesterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeSemesterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(personTypePanel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(currentSemesterLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currentSemesterIndicatorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(changeSemesterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(changeSemesterButton)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(courseSchedulerLabel)
                .addGap(204, 204, 204))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(courseSchedulerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentSemesterLabel)
                    .addComponent(currentSemesterIndicatorLabel)
                    .addComponent(changeSemesterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(changeSemesterButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(personTypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void addSemesterSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSemesterSubmitButtonActionPerformed
        addSemesterStatusLabel.setText("");
        SemesterQueries semester = new SemesterQueries();
        if (nameSemesterField.getText() != "") {
            semester.addSemester(nameSemesterField.getText());
            changeSemesterComboBox.addItem(nameSemesterField.getText());
            addSemesterStatusLabel.setText("Semester added successfully");
            currentSemesterIndicatorLabel.setText(changeSemesterComboBox.getSelectedItem().toString());
            nameSemesterField.setText("");
        }
    }//GEN-LAST:event_addSemesterSubmitButtonActionPerformed

    private void addCourseSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCourseSubmitButtonActionPerformed
        addCourseStatusLabel.setText("");
        CourseQueries courseQuery = new CourseQueries();
        int vacancy = (int) seatsSpinner.getValue();
        String semester = changeSemesterComboBox.getSelectedItem().toString();
        if (semester != "" && !courseCodeField.getText().isEmpty() && !courseDescriptionField.getText().isEmpty() && vacancy !=0) {
            CourseEntry course = new CourseEntry(semester, courseCodeField.getText(), courseDescriptionField.getText(), vacancy);
            courseQuery.addCourse(course);
            
            selectCourseDCSComboBox.removeAllItems();
            scheduleCourseComboBox.removeAllItems();
            dropCourseComboBox.removeAllItems();
            selectCourseDropComboBox.removeAllItems();
            
            ArrayList<CourseEntry> courses = CourseQueries.getAllCourses(semester);
           
            for (CourseEntry courseBox: courses) {
                
                selectCourseDCSComboBox.addItem(courseBox.getCourseCode());
                scheduleCourseComboBox.addItem(courseBox.getCourseCode());
                dropCourseComboBox.addItem(courseBox.getCourseCode());
            }
            
            if (selectStudentDropComboBox.getItemCount() != 0) {
                ArrayList<StudentEntry> students = StudentQueries.getAllStudents();
                String studentDropBox = students.get(selectStudentDropComboBox.getSelectedIndex()).getStudentID();
                ArrayList<ScheduleEntry> schedules = ScheduleQueries.getSchedulebyStudent(semester,studentDropBox);
                for (ScheduleEntry schedule: schedules) {
                    selectCourseDropComboBox.addItem(schedule.getCourseCode());
                }
            }

            addCourseStatusLabel.setText("Course added successfully");
            courseCodeField.setText("");
            courseDescriptionField.setText("");
            seatsSpinner.setValue(0);
        }
    }//GEN-LAST:event_addCourseSubmitButtonActionPerformed

    private void addStudentSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStudentSubmitButtonActionPerformed
        addStudentStatusLabel1.setText("");
        String currentSemester = changeSemesterComboBox.getSelectedItem().toString();
        StudentQueries studentQuery = new StudentQueries();
        if (!studentIDField.getText().isEmpty() && !firstNameField.getText().isEmpty() && !lastNameField.getText().isEmpty()) {
            StudentEntry student = new StudentEntry(studentIDField.getText(), firstNameField.getText(), lastNameField.getText());
            studentQuery.addStudent(student);
            
            displayScheduleStudentComboBox.removeAllItems();
            scheduleCourseStudentComboBox.removeAllItems();
            dropStudentComboBox.removeAllItems();
            selectStudentDropComboBox.removeAllItems();
            selectCourseDropComboBox.removeAllItems();
            
            
            
            /*displayScheduleStudentComboBox.addItem(student.getFirstName() + " " + student.getLastName());
            scheduleCourseStudentComboBox.addItem(student.getFirstName() + " " + student.getLastName());
            dropStudentComboBox.addItem(student.getFirstName() + " " + student.getLastName());
            selectStudentDropComboBox.addItem(student.getFirstName() + " " + student.getLastName());
            selectCourseDropComboBox.removeAllItems();*/
            ArrayList<StudentEntry> students = StudentQueries.getAllStudents();
            
            for (StudentEntry studentBox: students) {
                displayScheduleStudentComboBox.addItem(studentBox.getFirstName() + " " + studentBox.getLastName());
                scheduleCourseStudentComboBox.addItem(studentBox.getFirstName() + " " + studentBox.getLastName());
                dropStudentComboBox.addItem(studentBox.getFirstName() + " " + studentBox.getLastName());
                selectStudentDropComboBox.addItem(studentBox.getFirstName() + " " + studentBox.getLastName());
            }
            
            String studentDropBox = students.get(selectStudentDropComboBox.getSelectedIndex()).getStudentID();
            ArrayList<ScheduleEntry> schedules = ScheduleQueries.getSchedulebyStudent(currentSemester,studentDropBox);
            for (ScheduleEntry schedule: schedules) {
                selectCourseDropComboBox.addItem(schedule.getCourseCode());
            }
            addStudentStatusLabel1.setText(student.getFirstName() + " " + student.getLastName() + " has been added successfully");
            studentIDField.setText("");
            firstNameField.setText("");
            lastNameField.setText("");
        }
    }//GEN-LAST:event_addStudentSubmitButtonActionPerformed

    private void scheduleCourseSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleCourseSubmitButtonActionPerformed
        if (changeSemesterComboBox.getItemCount() != 0) {
            statusofSeatsLabel.setText("");
            ScheduleQueries scheduleQuery = new ScheduleQueries();
            CourseQueries courseQuery = new CourseQueries();
            String currentSemester = changeSemesterComboBox.getSelectedItem().toString();
            //if (scheduleCourseComboBox.getSelectedItem().toString() != "" && scheduleCourseStudentComboBox.getSelectedItem().toString() )
            String courseCodeSelected = scheduleCourseComboBox.getSelectedItem().toString();
            ArrayList<StudentEntry> students = StudentQueries.getAllStudents();
            String studentSelected = students.get(scheduleCourseStudentComboBox.getSelectedIndex()).getStudentID();
            if (courseCodeSelected != "" && studentSelected != "") {
                int numOfSeats = courseQuery.getCourseSeats(currentSemester, courseCodeSelected);
                int numOfStudents = scheduleQuery.getScheduledStudentCount(currentSemester, courseCodeSelected);
                String statusLabel = students.get(scheduleCourseStudentComboBox.getSelectedIndex()).getFirstName() + " " + students.get(scheduleCourseStudentComboBox.getSelectedIndex()).getLastName() + " has been scheduled";
                String status = "S";
                if (numOfSeats <= numOfStudents) {
                    statusLabel = students.get(scheduleCourseStudentComboBox.getSelectedIndex()).getFirstName() + " " + students.get(scheduleCourseStudentComboBox.getSelectedIndex()).getLastName() + " has been waitlisted";
                    status = "W";
                }
                java.util.Date date = new java.util.Date();
                Timestamp currentTimestamp = new Timestamp(date.getTime());        
                ScheduleEntry schedule = new ScheduleEntry(currentSemester, courseCodeSelected, studentSelected, status, currentTimestamp);
                ScheduleQueries.addScheduleEntry(schedule);
                // dropCourseComboBox.addItem(courseCodeSelected);
                dropCourseComboBox.removeAllItems();
                ArrayList<CourseEntry> courses = CourseQueries.getAllCourses(currentSemester);
                for (CourseEntry course: courses) {
                    dropCourseComboBox.addItem(course.getCourseCode());
                }
                
                selectCourseDropComboBox.removeAllItems();
                String studentDropBox = students.get(selectStudentDropComboBox.getSelectedIndex()).getStudentID();
                ArrayList<ScheduleEntry> schedules = ScheduleQueries.getSchedulebyStudent(currentSemester,studentDropBox);
                for (ScheduleEntry scheduled: schedules) {
                    selectCourseDropComboBox.addItem(scheduled.getCourseCode());
                }
                statusofSeatsLabel.setText(statusLabel); 
            }
        }
    }//GEN-LAST:event_scheduleCourseSubmitButtonActionPerformed
    
    private void displayScheduleDisplayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayScheduleDisplayButtonActionPerformed
        if (changeSemesterComboBox.getItemCount() != 0) {
            String currentSemester = changeSemesterComboBox.getSelectedItem().toString();
            ArrayList<StudentEntry> students = StudentQueries.getAllStudents();
            String studentID = students.get(displayScheduleStudentComboBox.getSelectedIndex()).getStudentID();
            ArrayList<ScheduleEntry> schedules = ScheduleQueries.getSchedulebyStudent(currentSemester, studentID);
            DefaultTableModel displayScheduleTableModel = (DefaultTableModel)displaySchedule.getModel();

            displayScheduleTableModel.setNumRows(0);
            Object[] rowData = new Object[2];

            for (ScheduleEntry entry:schedules) {
                rowData[0] = entry.getCourseCode();
                rowData[1] = entry.getStatus();
                displayScheduleTableModel.addRow(rowData);
            }
        }
    }//GEN-LAST:event_displayScheduleDisplayButtonActionPerformed

    private void displayCourseDisplayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayCourseDisplayButtonActionPerformed
        if (changeSemesterComboBox.getItemCount() != 0) {
            String currentSemester = changeSemesterComboBox.getSelectedItem().toString();
            ArrayList<CourseEntry> courses = CourseQueries.getAllCourses(currentSemester);
            DefaultTableModel displayCoursesTableModel = (DefaultTableModel)displayCourses.getModel();

            displayCoursesTableModel.setNumRows(0);
            Object[] rowData = new Object[3];

            for (CourseEntry course:courses) {
                rowData[0] = course.getCourseCode();
                rowData[1] = course.getDescription();
                rowData[2] = course.getSeats();
                displayCoursesTableModel.addRow(rowData);
            }
        }
    }//GEN-LAST:event_displayCourseDisplayButtonActionPerformed

    private void changeSemesterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeSemesterButtonActionPerformed
       currentSemesterIndicatorLabel.setText(changeSemesterComboBox.getSelectedItem().toString());
       String currentSemester = changeSemesterComboBox.getSelectedItem().toString();
       scheduleCourseComboBox.removeAllItems();
       selectCourseDropComboBox.removeAllItems();
       dropCourseComboBox.removeAllItems();
       selectCourseDCSComboBox.removeAllItems();
       
       ArrayList<CourseEntry> courses = CourseQueries.getAllCourses(currentSemester);
       for (CourseEntry course: courses) {
            scheduleCourseComboBox.addItem(course.getCourseCode());
            dropCourseComboBox.addItem(course.getCourseCode());
            selectCourseDCSComboBox.addItem(course.getCourseCode());
       }
       
       ArrayList<StudentEntry> students = StudentQueries.getAllStudents();
       String studentDropBox = students.get(selectStudentDropComboBox.getSelectedIndex()).getStudentID();
       ArrayList<ScheduleEntry> schedules = ScheduleQueries.getSchedulebyStudent(currentSemester,studentDropBox);
       for (ScheduleEntry scheduled: schedules) {
           selectCourseDropComboBox.addItem(scheduled.getCourseCode());
       }
       
       
    }//GEN-LAST:event_changeSemesterButtonActionPerformed
 
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        ArrayList<String> semesters = SemesterQueries.getSemesterList();
        for (String semester:semesters) {
            changeSemesterComboBox.addItem(semester);
        }
        if (changeSemesterComboBox.getItemCount() != 0) {
            String currentSemester = changeSemesterComboBox.getSelectedItem().toString();
            ArrayList<StudentEntry> students = StudentQueries.getAllStudents();
            for (StudentEntry student: students) {
                scheduleCourseStudentComboBox.addItem(student.getFirstName() + " " + student.getLastName());
                displayScheduleStudentComboBox.addItem(student.getFirstName() + " " + student.getLastName());
                dropStudentComboBox.addItem(student.getFirstName() + " " + student.getLastName());
                selectStudentDropComboBox.addItem(student.getFirstName() + " " + student.getLastName());
            }
            
            ArrayList<CourseEntry> courses = CourseQueries.getAllCourses(currentSemester);
            for (CourseEntry course: courses) {
                scheduleCourseComboBox.addItem(course.getCourseCode());
                selectCourseDCSComboBox.addItem(course.getCourseCode());
                dropCourseComboBox.addItem(course.getCourseCode());
            }
            
            /*String studentDropBox = students.get(selectStudentDropComboBox.getSelectedIndex()).getStudentID();
            ArrayList<ScheduleEntry> schedules = ScheduleQueries.getSchedulebyStudent(currentSemester,studentDropBox);
            for (ScheduleEntry scheduled: schedules) {
                selectCourseDropComboBox.addItem(scheduled.getCourseCode());
            }*/
            currentSemesterIndicatorLabel.setText(changeSemesterComboBox.getSelectedItem().toString());
        }
        
    }//GEN-LAST:event_formWindowOpened

    private void dCSSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dCSSubmitButtonActionPerformed
        if (changeSemesterComboBox.getItemCount() != 0) {
            String currentSemester = changeSemesterComboBox.getSelectedItem().toString();
            ArrayList<CourseEntry> courses = CourseQueries.getAllCourses(currentSemester);
            String courseCode = courses.get(selectCourseDCSComboBox.getSelectedIndex()).getCourseCode();
            ArrayList<ScheduleEntry> scheduledStudentList = ScheduleQueries.getScheduledStudentsByCourse(currentSemester, courseCode);
            ArrayList<ScheduleEntry> waitlistedStudentList = ScheduleQueries.getWaitlistedStudentsByCourse(currentSemester, courseCode);
            ArrayList<String> scheduledStudentIDs = new ArrayList<String>();
            ArrayList<String> waitlistedStudentIDs = new ArrayList<String>();
            
            for (ScheduleEntry scheduledStudent: scheduledStudentList) {
                scheduledStudentIDs.add(scheduledStudent.getStudentID());
            }
            
            for (ScheduleEntry waitlistedStudent: waitlistedStudentList) {
                waitlistedStudentIDs.add(waitlistedStudent.getStudentID());
            }
            
            ArrayList<StudentEntry> scheduledStudents = new ArrayList<StudentEntry>();
            ArrayList<StudentEntry> waitlistedStudents = new ArrayList<StudentEntry>();
            
            for (String student: scheduledStudentIDs) {
                scheduledStudents.add(StudentQueries.getStudent(student));
            }
            
            for (String student: waitlistedStudentIDs) {
                waitlistedStudents.add(StudentQueries.getStudent(student));
            }
            
            DefaultTableModel scheduledStudentsTableModel = (DefaultTableModel)scheduledStudentsTable.getModel();
            
            scheduledStudentsTableModel.setNumRows(0);
            Object[] rowData = new Object[3];

            for (StudentEntry entry: scheduledStudents) {
                rowData[0] = entry.getFirstName();
                rowData[1] = entry.getLastName();
                rowData[2] = entry.getStudentID();
                scheduledStudentsTableModel.addRow(rowData);
            }
            
            DefaultTableModel waitlistedStudentsTableModel = (DefaultTableModel)waitlistedStudentsTable.getModel();
            
            waitlistedStudentsTableModel.setNumRows(0);
            Object[] rowData1 = new Object[3];
            
            for (StudentEntry entry: waitlistedStudents) {
                rowData1[0] = entry.getFirstName();
                rowData1[1] = entry.getLastName();
                rowData1[2] = entry.getStudentID();
                waitlistedStudentsTableModel.addRow(rowData1);
            }
            
        }
    }//GEN-LAST:event_dCSSubmitButtonActionPerformed

    
    private void dropStudentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropStudentButtonActionPerformed
        String currentSemester = changeSemesterComboBox.getSelectedItem().toString();
        ArrayList<StudentEntry> students = StudentQueries.getAllStudents();
        StudentEntry modifiedStudent = new StudentEntry("", "", "");
        StudentEntry student = students.get(dropStudentComboBox.getSelectedIndex());
        String selectedStudentID = student.getStudentID();
        
        ArrayList<String> semesters = SemesterQueries.getSemesterList();
        
        String semesterText = "";
        String studentStatusText="";
        String waitlistedStudentText="";
        String labelText ="";
        
        String studentStatus = student.getFirstName() + " " + student.getLastName() + " has been dropped from ";
        
        String scheduleStatus = "";
        
        for (String semesterSelected: semesters) {
            System.out.println(semesterSelected);
            studentStatusText="";
            waitlistedStudentText="";
            
            ArrayList<ScheduleEntry> studentSchedule = ScheduleQueries.getSchedulebyStudent(semesterSelected,selectedStudentID);
            studentStatusText = "";
            semesterText = "For Semester: " + semesterSelected + "\n";
            
            for (ScheduleEntry schedule: studentSchedule) {
                modifiedStudent = ScheduleQueries.dropStudentScheduleByCourse(semesterSelected, selectedStudentID, schedule.getCourseCode());
                System.out.println(schedule.getStatus());
                scheduleStatus = schedule.getStatus();
                System.out.println(scheduleStatus);
                if("W".equals(scheduleStatus)) {
                    studentStatusText = studentStatusText + studentStatus + "the waitlist for " + schedule.getCourseCode() + "\n";
                } 
                else {
                    studentStatusText = studentStatusText + studentStatus + schedule.getCourseCode() + "\n";
                }
                  
                // dropStudentStatusText = dropStudentStatusText + studentStatusText;
                System.out.println(modifiedStudent.getStudentID());
                
                if (modifiedStudent.getStudentID() != "") {
                    waitlistedStudentText = waitlistedStudentText + modifiedStudent.getFirstName() + " " + modifiedStudent.getLastName() + " has been scheduled into " + schedule.getCourseCode() + "\n";
                }
            }
            
            labelText = labelText + semesterText + "\n" + studentStatusText + waitlistedStudentText;
            
            // dropStudentStatusText = semesterText  + "\n" + waitlistedStudentText;

        }
        
        
        
        dropStudentStatus.setText(labelText);
        
        StudentQueries.dropStudent(selectedStudentID);
        
        displayScheduleStudentComboBox.removeAllItems();
        scheduleCourseStudentComboBox.removeAllItems();
        dropStudentComboBox.removeAllItems();
        selectStudentDropComboBox.removeAllItems();
        
        ArrayList<StudentEntry> studentsList = StudentQueries.getAllStudents();
        
        for (StudentEntry newStudent: studentsList) {
            displayScheduleStudentComboBox.addItem(newStudent.getFirstName() + " " + newStudent.getLastName());
            scheduleCourseStudentComboBox.addItem(newStudent.getFirstName() + " " + newStudent.getLastName());
            dropStudentComboBox.addItem(newStudent.getFirstName() + " " + newStudent.getLastName());
            selectStudentDropComboBox.addItem(newStudent.getFirstName() + " " + newStudent.getLastName());;
        }

        selectCourseDropComboBox.removeAllItems();
        String studentDropBox = students.get(selectStudentDropComboBox.getSelectedIndex()).getStudentID();
        ArrayList<ScheduleEntry> schedules = ScheduleQueries.getSchedulebyStudent(currentSemester,studentDropBox);
        for (ScheduleEntry schedule: schedules) {
            selectCourseDropComboBox.addItem(schedule.getCourseCode());
        }
        
        // labelText = labelText + studentName.getFirstName() + " " + studentName.getLastName() + " has been dropped.";
        // dropStudentStatus.setText(labelText);
    }//GEN-LAST:event_dropStudentButtonActionPerformed

    
    private void dropCourseAdminButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropCourseAdminButtonActionPerformed
        String currentSemester = changeSemesterComboBox.getSelectedItem().toString();
        ArrayList<CourseEntry> courses = CourseQueries.getAllCourses(currentSemester);
        String courseCode = courses.get(selectCourseDCSComboBox.getSelectedIndex()).getCourseCode();
        
        ArrayList<StudentEntry> students = StudentQueries.getAllStudents();
        
        ArrayList<ScheduleEntry> scheduledStudentList = ScheduleQueries.getScheduledStudentsByCourse(currentSemester, courseCode);
        ArrayList<ScheduleEntry> waitlistedStudentList = ScheduleQueries.getWaitlistedStudentsByCourse(currentSemester, courseCode);
        
        ArrayList<String> scheduledStudentIDs = new ArrayList<String>();
        ArrayList<String> waitlistedStudentIDs = new ArrayList<String>();
            
        for (ScheduleEntry scheduledStudent: scheduledStudentList) {
            scheduledStudentIDs.add(scheduledStudent.getStudentID());
        }

        for (ScheduleEntry waitlistedStudent: waitlistedStudentList) {
            waitlistedStudentIDs.add(waitlistedStudent.getStudentID());
        }

        ArrayList<StudentEntry> scheduledStudents = new ArrayList<StudentEntry>();
        ArrayList<StudentEntry> waitlistedStudents = new ArrayList<StudentEntry>();

        for (String student: scheduledStudentIDs) {
            scheduledStudents.add(StudentQueries.getStudent(student));
        }

        for (String student: waitlistedStudentIDs) {
            waitlistedStudents.add(StudentQueries.getStudent(student));
        }
        
        
        ScheduleQueries.dropScheduleByCourse(currentSemester, courseCode);
        CourseQueries.dropCourse(currentSemester,courseCode);
        
        String labelText = "Scheduled students dropped from the course:\n";
        // labelText = studentName.getFirstName() + " " + studentName.getLastName() + " has been dropped from below courses: \n";  
        for (StudentEntry student: scheduledStudents) {
            // StudentEntry modifiedStudent = ScheduleQueries.dropStudentScheduleByCourse(currentSemester, studentSelected, course.getCourseCode());
            labelText = labelText + student.getFirstName() + " " + student.getLastName() + " has been dropped \n";   
        }
        labelText = labelText + "\n" + "Waitlisted students dropped from the course:\n";
        for (StudentEntry student: waitlistedStudents) {
            // StudentEntry modifiedStudent = ScheduleQueries.dropStudentScheduleByCourse(currentSemester, studentSelected, course.getCourseCode());
            labelText = labelText + student.getFirstName() + " " + student.getLastName() + " has been dropped from " + courseCode + "\n";
            
        }
        
        dropCourseStatus.setText(labelText);
        
        dropCourseComboBox.removeAllItems();
        scheduleCourseComboBox.removeAllItems();
        selectCourseDCSComboBox.removeAllItems();
        selectCourseDropComboBox.removeAllItems();
        
       ArrayList<CourseEntry> coursesList = CourseQueries.getAllCourses(currentSemester);
       
       for (CourseEntry course: coursesList) {
            scheduleCourseComboBox.addItem(course.getCourseCode());
            dropCourseComboBox.addItem(course.getCourseCode());
            selectCourseDCSComboBox.addItem(course.getCourseCode());
       }

       String studentDropBox = students.get(selectStudentDropComboBox.getSelectedIndex()).getStudentID();
       ArrayList<ScheduleEntry> schedules = ScheduleQueries.getSchedulebyStudent(currentSemester,studentDropBox);
       for (ScheduleEntry scheduled: schedules) {
           selectCourseDropComboBox.addItem(scheduled.getCourseCode());
       }
        
    }//GEN-LAST:event_dropCourseAdminButtonActionPerformed
    
    private void dropCourseStudentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropCourseStudentButtonActionPerformed
        if (changeSemesterComboBox.getItemCount() != 0) {
            dropCourseStatusLabel.setText("");
            waitlistStatusLabel.setText("");
            String currentSemester = changeSemesterComboBox.getSelectedItem().toString();
            ArrayList<StudentEntry> students = StudentQueries.getAllStudents();
            String studentSelected = students.get(selectStudentDropComboBox.getSelectedIndex()).getStudentID();
            String studentSelectedName = students.get(selectStudentDropComboBox.getSelectedIndex()).getFirstName() + " " + students.get(selectStudentDropComboBox.getSelectedIndex()).getLastName();
            System.out.println(studentSelectedName);
            String courseCodeSelected = selectCourseDropComboBox.getSelectedItem().toString();
            StudentEntry modifiedStudent = new StudentEntry("", "", "");
            
            if (courseCodeSelected != "" && studentSelected != "") {
                // String dropCourseStatus = students.get(selectStudentDropComboBox.getSelectedIndex()).getFirstName() + " " + students.get(scheduleCourseStudentComboBox.getSelectedIndex()).getLastName() + " has been dropped from ";        
                modifiedStudent = ScheduleQueries.dropStudentScheduleByCourse(currentSemester, studentSelected, courseCodeSelected);
                
                dropCourseStatusLabel.setText(studentSelectedName + " has been dropped from " + courseCodeSelected); 
                if (modifiedStudent.getStudentID() != "") {
                    waitlistStatusLabel.setText(modifiedStudent.getFirstName() + " " + modifiedStudent.getLastName() + " has been scheduled into " + courseCodeSelected); 
                }
                
                selectCourseDropComboBox.removeAllItems();
                String studentDropBox = students.get(selectStudentDropComboBox.getSelectedIndex()).getStudentID();
                ArrayList<ScheduleEntry> schedules = ScheduleQueries.getSchedulebyStudent(currentSemester,studentDropBox);
                for (ScheduleEntry schedule: schedules) {
                    selectCourseDropComboBox.addItem(schedule.getCourseCode());  
                }
            }
        }
    }//GEN-LAST:event_dropCourseStudentButtonActionPerformed

    private void selectStudentDropComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectStudentDropComboBoxActionPerformed
        selectCourseDropComboBox.removeAllItems();
        String currentSemester = changeSemesterComboBox.getSelectedItem().toString();
        ArrayList<StudentEntry> students = StudentQueries.getAllStudents();
        
        if (selectStudentDropComboBox.getItemCount() != 0) {
            String studentSelected = students.get(selectStudentDropComboBox.getSelectedIndex()).getStudentID();
            ArrayList<ScheduleEntry> schedules = ScheduleQueries.getSchedulebyStudent(currentSemester,studentSelected);
            for (ScheduleEntry schedule: schedules) {
                selectCourseDropComboBox.addItem(schedule.getCourseCode());
            }
        }
    }//GEN-LAST:event_selectStudentDropComboBoxActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CourseSchedulerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CourseSchedulerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CourseSchedulerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CourseSchedulerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CourseSchedulerGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel addCoursePanel;
    private javax.swing.JLabel addCourseStatusLabel;
    private javax.swing.JButton addCourseSubmitButton;
    private javax.swing.JPanel addSemesterPanel;
    private javax.swing.JLabel addSemesterStatusLabel;
    private javax.swing.JButton addSemesterSubmitButton;
    private javax.swing.JPanel addStudentPanel;
    private javax.swing.JLabel addStudentStatusLabel;
    private javax.swing.JLabel addStudentStatusLabel1;
    private javax.swing.JButton addStudentSubmitButton;
    private javax.swing.JTabbedPane adminFunctions;
    private javax.swing.JPanel adminPanel;
    private javax.swing.JButton changeSemesterButton;
    private javax.swing.JComboBox<String> changeSemesterComboBox;
    private javax.swing.JTextField courseCodeField;
    private javax.swing.JLabel courseCodeLabel;
    private javax.swing.JLabel courseDescriptLabel;
    private javax.swing.JTextField courseDescriptionField;
    private javax.swing.JLabel courseSchedulerLabel;
    private javax.swing.JLabel currentSemesterIndicatorLabel;
    private javax.swing.JLabel currentSemesterLabel;
    private javax.swing.JButton dCSSubmitButton;
    private javax.swing.JButton displayCourseDisplayButton;
    private javax.swing.JPanel displayCoursePanel;
    private javax.swing.JTable displayCourses;
    private javax.swing.JScrollPane displayCoursesTable;
    private javax.swing.JTable displaySchedule;
    private javax.swing.JButton displayScheduleDisplayButton;
    private javax.swing.JPanel displaySchedulePanel;
    private javax.swing.JComboBox<String> displayScheduleStudentComboBox;
    private javax.swing.JScrollPane displayScheduleTable;
    private javax.swing.JButton dropCourseAdminButton;
    private javax.swing.JComboBox<String> dropCourseComboBox;
    private javax.swing.JTextArea dropCourseStatus;
    private javax.swing.JLabel dropCourseStatusLabel;
    private javax.swing.JButton dropCourseStudentButton;
    private javax.swing.JButton dropStudentButton;
    private javax.swing.JComboBox<String> dropStudentComboBox;
    private javax.swing.JTextArea dropStudentStatus;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JTextField nameSemesterField;
    private javax.swing.JLabel nameSemesterLabel;
    private javax.swing.JTabbedPane personTypePanel;
    private javax.swing.JComboBox<String> scheduleCourseComboBox;
    private javax.swing.JPanel scheduleCoursePanel;
    private javax.swing.JLabel scheduleCourseStatusLabel;
    private javax.swing.JComboBox<String> scheduleCourseStudentComboBox;
    private javax.swing.JButton scheduleCourseSubmitButton;
    private javax.swing.JTable scheduledStudentsTable;
    private javax.swing.JLabel seatsLabel;
    private javax.swing.JSpinner seatsSpinner;
    private javax.swing.JComboBox<String> selectCourseDCSComboBox;
    private javax.swing.JComboBox<String> selectCourseDropComboBox;
    private javax.swing.JLabel selectCourseLabel;
    private javax.swing.JComboBox<String> selectStudentDropComboBox;
    private javax.swing.JLabel selectStudentLabelDS;
    private javax.swing.JLabel selectStudentLabelSC;
    private javax.swing.JLabel statusofSeatsLabel;
    private javax.swing.JTabbedPane studentFunctions;
    private javax.swing.JTextField studentIDField;
    private javax.swing.JLabel studentIDLabel;
    private javax.swing.JPanel studentPanel;
    private javax.swing.JLabel waitlistStatusLabel;
    private javax.swing.JTable waitlistedStudentsTable;
    // End of variables declaration//GEN-END:variables
}
